{"version":3,"sources":["components/SearchBar/index.js","components/Result/Item.js","components/Result/index.js","components/Finder/index.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Input","input","SearchBar","props","useContext","FinderContext","setQuery","resetState","perma","window","location","host","encodeURIComponent","value","autoFocus","onChange","onClick","href","protocol","selected","Cover","Avatar","img","primary","Item","id","name","stargazers","toggleSelected","winner","runners","handleSelect","includes","alt","src","avatarUrl","map","key","Result","repositories","repository","createContext","fetchStargazers","signal","query","fetch","method","headers","Authorization","process","REACT_APP_GH_TOKEN","body","JSON","stringify","initialState","data","_controller","undefined","Finder","state","e","a","target","abort","AbortController","setState","response","json","setData","nextSelected","filter","item","push","search","edges","node","databaseId","nodes","stargazer","length","this","decodeURIComponent","console","log","Provider","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f2f9682.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { FinderContext } from \"../Finder\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-template-rows: auto auto;\r\n  background: #111;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n\r\n  & p {\r\n    margin: 0;\r\n\r\n    color: #aaa;\r\n  }\r\n  & a {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 10px 20px;\r\n  background: white;\r\n`;\r\n\r\nconst SearchBar = props => {\r\n  const { setQuery, resetState } = useContext(FinderContext);\r\n\r\n  const perma = `//${window.location.host}/?q=${encodeURIComponent(\r\n    props.value\r\n  )}`;\r\n\r\n  return (\r\n    <Container>\r\n      <Input {...props} autoFocus onChange={setQuery} />\r\n      <button onClick={resetState}>Reset</button>\r\n      <p>\r\n        Permalink: <a href={perma}>{`${window.location.protocol}${perma}`}</a>\r\n      </p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { FinderContext } from \"../Finder\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  grid-column-gap: 20px;\r\n  overflow: hidden;\r\n  word-break: break-word;\r\n  cursor: pointer;\r\n\r\n  background: #eee;\r\n\r\n  & h3 {\r\n    margin: 15px 0 20px;\r\n    color: #666;\r\n  }\r\n\r\n  ${({ selected }) => selected && \"opacity: .5\"};\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  display: grid;\r\n  grid-row: 1 / span 2;\r\n  justify-items: center;\r\n  align-items: center;\r\n\r\n  background: #333;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Avatar = styled.img`\r\n  width: ${({ primary }) => (primary ? 60 : 25)}px;\r\n  height: ${({ primary }) => (primary ? 60 : 25)}px;\r\n  border-radius: 50%;\r\n  &:nth-of-type(1n + 2) {\r\n    margin-left: 5px;\r\n  }\r\n`;\r\n\r\nconst Item = ({ id, name, stargazers }) => {\r\n  const { toggleSelected, selected } = useContext(FinderContext);\r\n\r\n  const handleSelect = name => () => {\r\n    toggleSelected(name);\r\n  };\r\n\r\n  const [winner, ...runners] = stargazers;\r\n\r\n  return (\r\n    <Container onClick={handleSelect(id)} selected={selected.includes(id)}>\r\n      <Cover>\r\n        {winner ? (\r\n          <Avatar alt={winner.name} src={winner.avatarUrl} primary />\r\n        ) : (\r\n          <Avatar\r\n            alt=\"Fill Murray\"\r\n            src=\"//www.fillmurray.com/100/100\"\r\n            primary\r\n          />\r\n        )}\r\n      </Cover>\r\n      <div>\r\n        <h3>{name}</h3>\r\n      </div>\r\n      <div>\r\n        {runners.map(({ id, name, avatarUrl }) => (\r\n          <Avatar\r\n            {...{\r\n              alt: name,\r\n              src: avatarUrl,\r\n              key: `stargazer-${id}`\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Item from \"./Item\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, minmax(200px, 1fr));\r\n  grid-gap: 20px;\r\n  @media (min-width: 700px) {\r\n    grid-template-columns: repeat(4, minmax(200px, 1fr));\r\n  }\r\n`;\r\n\r\nconst Result = ({ repositories }) => {\r\n  return (\r\n    <Container>\r\n      {repositories.map(repository => (\r\n        <Item {...repository} key={`repository-${repository.id}`} />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component, createContext } from \"react\";\r\n\r\nimport SearchBar from \"../SearchBar\";\r\nimport Result from \"../Result\";\r\n\r\nexport const FinderContext = createContext();\r\n\r\nconst fetchStargazers = (repository, { signal }) => {\r\n  const query = `\r\nquery {\r\n  search(query: \"${repository}\", first: 20, type: REPOSITORY){\r\n    edges {\r\n      node {\r\n        ... on Repository {\r\n          databaseId\r\n          url\r\n          name\r\n          stargazers(first: 6) {\r\n            nodes {\r\n              databaseId\r\n              name\r\n              avatarUrl\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n  `;\r\n\r\n  return fetch(\"https://api.github.com/graphql\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `bearer ${process.env.REACT_APP_GH_TOKEN}`\r\n    },\r\n    body: JSON.stringify({\r\n      query\r\n    }),\r\n    signal\r\n  });\r\n};\r\n\r\nconst initialState = {\r\n  query: \"\",\r\n  data: [],\r\n  selected: [],\r\n  _controller: undefined\r\n};\r\n\r\nclass Finder extends Component {\r\n  state = {\r\n    ...initialState,\r\n    setQuery: async e => {\r\n      const query = (e.target && e.target.value) || e;\r\n      if (this.state._controller) this.state._controller.abort();\r\n\r\n      const _controller = new AbortController();\r\n      this.setState({ query, _controller });\r\n\r\n      try {\r\n        const response = await fetchStargazers(query, _controller);\r\n        const data = await response.json();\r\n        this.state.setData(data);\r\n      } catch (_) {}\r\n    },\r\n    toggleSelected: id => {\r\n      this.setState(({ selected }) => {\r\n        let nextSelected = [...selected];\r\n        if (selected.includes(id)) {\r\n          nextSelected = nextSelected.filter(item => item !== id);\r\n        } else {\r\n          nextSelected.push(id);\r\n        }\r\n\r\n        return {\r\n          selected: nextSelected\r\n        };\r\n      });\r\n    },\r\n    setData: ({ data }) => {\r\n      const repositories = [];\r\n\r\n      for (let {\r\n        node: {\r\n          databaseId: id,\r\n          stargazers: { nodes: stargazers },\r\n          ...repository\r\n        }\r\n      } of data.search.edges) {\r\n        repositories.push({\r\n          ...repository,\r\n          id,\r\n          stargazers: stargazers.map(({ databaseId: id, ...stargazer }) => ({\r\n            id,\r\n            ...stargazer\r\n          }))\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        data: repositories\r\n      });\r\n    },\r\n    resetState: () => {\r\n      this.setState({ ...initialState });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (window.location.search.length > 1) {\r\n      this.state.setQuery(decodeURIComponent(\"tes%20ting\"));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(process.env.REACT_APP_GH_TOKEN);\r\n    return (\r\n      <FinderContext.Provider value={this.state}>\r\n        <SearchBar value={this.state.query} />\r\n        <Result repositories={this.state.data} />\r\n      </FinderContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Finder;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Finder from \"./components/Finder\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Finder />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}